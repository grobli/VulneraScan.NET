using VulneraNet.Core.Domain;

namespace VulneraNet.Core.Data;

public class VulnerabilityCount
{
    public int Total { get; private set; }
    public int Low { get; private set; }
    public int Moderate { get; private set; }
    public int High { get; private set; }
    public int Critical { get; private set; }

    public Severity HighestSeverity
    {
        get
        {
            if (Total == 0) return Severity.None;
            if (Critical > 0) return Severity.Critical;
            if (High > 0) return Severity.High;
            return Moderate > 0 ? Severity.Moderate : Severity.Low;
        }
    }

    public VulnerabilityCount()
    {
    }

    public VulnerabilityCount(IEnumerable<Vulnerability> vulnerabilities)
    {
        var vs = vulnerabilities as Vulnerability[] ?? vulnerabilities.ToArray();
        Total = vs.Length;
        Low = vs.Count(v => v.Severity == Severity.Low);
        Moderate = vs.Count(v => v.Severity == Severity.Moderate);
        High = vs.Count(v => v.Severity == Severity.High);
        Critical = vs.Count(v => v.Severity == Severity.Critical);
    }

    public int GetTotalFromLevel(Severity severityLevel) =>
        severityLevel switch
        {
            Severity.Low => Total,
            Severity.Moderate => Moderate + High + Critical,
            Severity.High => High + Critical,
            Severity.Critical => Critical,
            Severity.None => 0,
            _ => throw new ArgumentOutOfRangeException(nameof(severityLevel), severityLevel, null)
        };

    public static VulnerabilityCount SumCounts(IEnumerable<VulnerabilityCount> vulnerabilityCounts)
    {
        var countSum = new VulnerabilityCount();
        foreach (var vulnerabilityCount in vulnerabilityCounts)
        {
            countSum.Total += vulnerabilityCount.Total;
            countSum.Low += vulnerabilityCount.Low;
            countSum.Moderate += vulnerabilityCount.Moderate;
            countSum.High += vulnerabilityCount.High;
            countSum.Critical += vulnerabilityCount.Critical;
        }

        return countSum;
    }

    public override string ToString() => $"{Total} (L:{Low} M:{Moderate} H:{High} C:{Critical})";
}